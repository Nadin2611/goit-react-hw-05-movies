{"version":3,"file":"static/js/754.9f484c9b.chunk.js","mappings":"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","sources":["components/MovieInfo/MovieInfo.styled.jsx","components/MovieInfo/MovieInfo.jsx","pages/MovieDetailsPage.jsx","service/api.js"],"sourcesContent":["import { Link } from 'react-router-dom';\n\nimport styled from 'styled-components';\n\nexport const Container = styled.div`\n  color: black;\n  line-height: 1.5;\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 20px;\n  font-size: 30px;\n  font-weight: bold;\n  text-align: center;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 40px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid black;\n`;\n\nexport const Image = styled.img`\n  width: 300px;\n  height: 450px;\n  height: auto;\n  border-radius: 10px;\n`;\n\nexport const DescriptionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 10px;\n  font-size: 20px;\n`;\n\nexport const UserScoreWrapper = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-bottom: 0;\n`;\n\nexport const UserScore = styled.p`\n  font-weight: bold;\n`;\n\nexport const UserScoreValue = styled.p``;\n\nexport const Overview = styled.p`\n  margin-bottom: 4px;\n  font-weight: bold;\n`;\n\nexport const OverviewText = styled.p`\n  font-size: 18px;\n  font-style: italic;\n`;\n\nexport const GenresWrapper = styled.div``;\n\nexport const GenresTitle = styled.h2`\n  font-size: 20px;\n  font-weight: bold;\n  margin-bottom: 0;\n`;\n\nexport const Genres = styled.ul`\n  display: flex;\n  flex-direction: row;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  padding: 0;\n  list-style: none;\n  gap: 10px;\n`;\n\nexport const InfoContainer = styled.div`\n  margin-top: 4px;\n  border-bottom: 1px solid black;\n  padding-left: 20px;\n`;\n\nexport const AdditionalInfo = styled.p`\n  margin-bottom: 5px;\n  font-size: 20px;\n`;\n\nexport const List = styled.ul``;\n\nexport const ListItem = styled.li`\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const StyledLink = styled(Link)`\n  &:hover {\n    color: red;\n  }\n`;\n","import {\n  Container,\n  Title,\n  Wrapper,\n  Image,\n  UserScore,\n  Overview,\n  OverviewText,\n  Genres,\n  InfoContainer,\n  AdditionalInfo,\n  List,\n  ListItem,\n  StyledLink,\n  DescriptionContainer,\n  UserScoreValue,\n  UserScoreWrapper,\n  GenresTitle,\n  GenresWrapper,\n} from './MovieInfo.styled';\n\nconst MovieInfo = ({\n  title,\n  poster_path,\n  vote_average,\n  overview,\n  genres,\n  release_date,\n}) => {\n  let year = '';\n  if (release_date) {\n    const date = new Date(release_date);\n    year = date.getFullYear();\n  }\n\n  const vote = (vote_average * 10).toFixed();\n\n  return (\n    <Container>\n      <Title>\n        {title} {year && `(${year})`}\n      </Title>\n      <Wrapper>\n        {poster_path && (\n          <Image src={poster_path} alt=\"movie-foto\" width=\"100\" height=\"100\" />\n        )}\n        <DescriptionContainer>\n          <UserScoreWrapper>\n            <UserScore>User Score: </UserScore>\n            <UserScoreValue>{vote}%</UserScoreValue>\n          </UserScoreWrapper>\n          <Overview>Overview: </Overview>\n          <OverviewText>{overview}</OverviewText>\n          <GenresWrapper>\n            <GenresTitle>Genres:</GenresTitle>\n            {genres && genres.length > 0 && (\n              <Genres>\n                {genres.map(genre => (\n                  <li key={genre.id}>{genre.name}</li>\n                ))}\n              </Genres>\n            )}\n          </GenresWrapper>\n        </DescriptionContainer>\n      </Wrapper>\n      <InfoContainer>\n        <AdditionalInfo>Additional information</AdditionalInfo>\n        <List>\n          <ListItem>\n            <StyledLink to=\"cast\">Cast</StyledLink>\n          </ListItem>\n          <ListItem>\n            <StyledLink to=\"reviews\">Reviews</StyledLink>\n          </ListItem>\n        </List>\n      </InfoContainer>\n    </Container>\n  );\n};\n\nexport default MovieInfo;\n","import { Outlet, useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\n\nimport getMovies from 'service/api';\nimport { Loader } from 'components/Loader/Loader';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const [details, setDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n\n        const movieDetails = await getMovies(`movie/${movieId}`);\n\n        setDetails(movieDetails);\n      } catch (error) {\n        toast.error('Something went wrong!!!');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (movieId) {\n      fetchData();\n    }\n  }, [movieId]);\n\n  const defaulImage =\n    'https://images.pexels.com/photos/6177645/pexels-photo-6177645.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1';\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {details && (\n        <MovieInfo\n          {...details}\n          poster_path={\n            details.poster_path\n              ? `${BASE_URL}${details.poster_path}`\n              : defaulImage\n          }\n        />\n      )}\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\nconst API_KEY = '2b5715eb91948ab21d8a3671ab9cf18a';\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst getMovies = async (endpoint, params = {}) => {\n  const response = await axios.get(`${BASE_URL}${endpoint}`, {\n    params: {\n      api_key: API_KEY,\n      ...params,\n    },\n  });\n  return response.data;\n};\n\nexport default getMovies;\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","Title","_templateObject2","Wrapper","_templateObject3","Image","_templateObject4","DescriptionContainer","_templateObject5","UserScoreWrapper","_templateObject6","UserScore","_templateObject7","UserScoreValue","_templateObject8","Overview","_templateObject9","OverviewText","_templateObject10","GenresWrapper","_templateObject11","GenresTitle","_templateObject12","Genres","_templateObject13","InfoContainer","_templateObject14","AdditionalInfo","_templateObject15","List","_templateObject16","ListItem","_templateObject17","StyledLink","Link","_templateObject18","_ref","title","poster_path","vote_average","overview","genres","release_date","year","Date","getFullYear","vote","toFixed","_jsxs","children","concat","_jsx","src","alt","width","height","length","map","genre","name","id","to","movieId","useParams","_useState","useState","_useState2","_slicedToArray","details","setDetails","_useState3","_useState4","isLoading","setIsLoading","useEffect","fetchData","_asyncToGenerator","_regeneratorRuntime","_callee","movieDetails","_context","prev","next","getMovies","sent","t0","toast","finish","stop","apply","arguments","Loader","MovieInfo","_objectSpread","Outlet","API_KEY","BASE_URL","endpoint","params","response","_args","undefined","axios","api_key","abrupt","data","_x"],"sourceRoot":""}