{"version":3,"file":"static/js/999.46f6cbf0.chunk.js","mappings":"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","sources":["components/BackLink/BackLink.styled.jsx","components/BackLink/BackLink.jsx","components/Container/Container.styled.jsx","components/MovieVideo/MovieVideo.styled.jsx","components/MovieVideo/MovieVideo.jsx","components/MovieInfo/MovieInfo.styled.jsx","components/MovieInfo/MovieInfo.jsx","pages/MovieDetailsPage.jsx","service/api.js","service/defaultImages.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  display: flex;\n  gap: 10px;\n  text-decoration: none;\n  color: white;\n  font-size: 18px;\n  padding: 10px 20px;\n  align-items: center;\n\n  &:hover,\n  &:focus {\n    color: blue;\n  }\n`;\n","import { StyledLink } from './BackLink.styled';\nimport { GoArrowLeft } from 'react-icons/go';\n\nconst BackLink = ({ to, children }) => {\n  return (\n    <>\n      <StyledLink to={to}>\n        <GoArrowLeft />\n        {children}\n      </StyledLink>\n    </>\n  );\n};\n\nexport default BackLink;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  max-width: 335px;\n  padding: 0 20px;\n`;\n","import styled from 'styled-components';\n\nexport const StyledMovieVideo = styled.div`\n  iframe {\n    width: 560px;\n    height: 315px;\n    margin-top: 30px;\n    border: 0;\n  }\n`;\n","import { StyledMovieVideo } from './MovieVideo.styled';\n\nconst MovieVideo = ({ name, videoKey }) => {\n  return (\n    <StyledMovieVideo>\n      <iframe\n        title={name}\n        src={`https://www.youtube.com/embed/${videoKey}`}\n        allowFullScreen\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n      ></iframe>\n    </StyledMovieVideo>\n  );\n};\n\nexport default MovieVideo;\n","import { Link } from 'react-router-dom';\n\nimport styled from 'styled-components';\n\nexport const Container = styled.div`\n  color: white;\n  line-height: 1.5;\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 30px;\n  font-size: 30px;\n  font-weight: bold;\n  text-align: center;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 50px;\n  padding: 30px;\n  border-radius: 10px;\n  background: linear-gradient(\n      to right,\n      rgba(31.5, 31.5, 31.5, 0.8) 20%,\n      rgba(31.5, 31.5, 31.5, 0) 50%\n    ),\n    ${props => (props.background ? `url(${props.background})` : 'none')};\n  background-size: cover;\n  background-position: center;\n`;\n\nexport const Image = styled.img`\n  width: 350px;\n  height: 520px;\n\n  border-radius: 10px;\n`;\n\nexport const DescriptionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 10px;\n  font-size: 20px;\n`;\n\nexport const DescriptionWrapper = styled.div`\n  margin: 0 auto;\n  display: flex;\n  flex-direction: row;\n  gap: 30px;\n`;\n\nexport const UserScoreWrapper = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-bottom: 0;\n`;\n\nexport const UserScore = styled.p`\n  font-weight: bold;\n`;\n\nexport const UserScoreValue = styled.p``;\n\nexport const Overview = styled.p`\n  margin-bottom: 4px;\n  font-weight: bold;\n`;\n\nexport const OverviewText = styled.p`\n  font-size: 18px;\n  font-style: italic;\n`;\n\nexport const GenresWrapper = styled.div``;\n\nexport const GenresTitle = styled.h2`\n  font-size: 20px;\n  font-weight: bold;\n  margin-bottom: 0;\n`;\n\nexport const Genres = styled.ul`\n  display: flex;\n  flex-direction: row;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  padding: 0;\n  list-style: none;\n  gap: 10px;\n`;\n\nexport const InfoContainer = styled.div`\n  margin-top: 20px;\n  border-top: 1px solid white;\n  border-bottom: 1px solid white;\n  padding-left: 20px;\n`;\n\nexport const AdditionalInfo = styled.p`\n  margin-bottom: 5px;\n  font-size: 20px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  list-style: none;\n  gap: 50px;\n`;\n\nexport const ListItem = styled.li`\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const StyledLink = styled(Link)`\n  padding: 10px 20px;\n  border-radius: 18px;\n  font-size: 24px;\n  text-decoration: none;\n  color: blue;\n  font-weight: 500;\n  transition: background-color 0.3s, color 0.3s;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: blue;\n  }\n\n  &.active {\n    color: white;\n    background-color: blue;\n  }\n`;\n","import MovieVideo from 'components/MovieVideo/MovieVideo';\nimport {\n  Container,\n  Title,\n  Wrapper,\n  Image,\n  UserScore,\n  Overview,\n  OverviewText,\n  Genres,\n  InfoContainer,\n  AdditionalInfo,\n  List,\n  ListItem,\n  StyledLink,\n  DescriptionContainer,\n  UserScoreValue,\n  UserScoreWrapper,\n  GenresTitle,\n  GenresWrapper,\n  DescriptionWrapper,\n} from './MovieInfo.styled';\n\nconst MovieInfo = ({\n  title,\n  name,\n  poster_path,\n  backdrop_path,\n  vote_average,\n  overview,\n  genres,\n  release_date,\n  videos,\n  firstOfficialTrailer,\n}) => {\n  let year = '';\n  if (release_date) {\n    const date = new Date(release_date);\n    year = date.getFullYear();\n  }\n\n  const vote = (vote_average * 10).toFixed();\n\n  return (\n    <Container>\n      <Wrapper background={backdrop_path}>\n        {poster_path && (\n          <Image src={poster_path} alt=\"movie-foto\" width=\"100\" height=\"100\" />\n        )}\n      </Wrapper>\n      <Title>\n        {title ?? name} {year && `(${year})`}\n      </Title>\n      <DescriptionWrapper>\n        {' '}\n        <DescriptionContainer>\n          <UserScoreWrapper>\n            <UserScore>User Score: </UserScore>\n            <UserScoreValue>{vote}%</UserScoreValue>\n          </UserScoreWrapper>\n          <Overview>Overview: </Overview>\n          <OverviewText>{overview}</OverviewText>\n          <GenresWrapper>\n            <GenresTitle>Genres:</GenresTitle>\n            {genres && genres.length > 0 && (\n              <Genres>\n                {genres.map(genre => (\n                  <li key={genre.id}>{genre.name}</li>\n                ))}\n              </Genres>\n            )}\n          </GenresWrapper>\n        </DescriptionContainer>\n        {firstOfficialTrailer && (\n          <MovieVideo\n            name={firstOfficialTrailer.name}\n            type={firstOfficialTrailer.type}\n            official={firstOfficialTrailer.official}\n            videoKey={firstOfficialTrailer.key}\n          />\n        )}\n      </DescriptionWrapper>\n\n      <InfoContainer>\n        <AdditionalInfo></AdditionalInfo>\n        <List>\n          <ListItem>\n            <StyledLink to=\"cast\">Cast</StyledLink>\n          </ListItem>\n          <ListItem>\n            <StyledLink to=\"reviews\">Reviews</StyledLink>\n          </ListItem>\n        </List>\n      </InfoContainer>\n    </Container>\n  );\n};\n\nexport default MovieInfo;\n","import { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { toast } from 'react-toastify';\n\nimport getMovies from 'service/api';\nimport { defaultImageMovie } from 'service/defaultImages';\nimport { Loader } from 'components/Loader/Loader';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\nimport BackLink from 'components/BackLink/BackLink';\nimport { Container } from 'components/Container/Container.styled';\n\nexport const BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const [details, setDetails] = useState(null);\n  const [videos, setVideos] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const BackLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  const findFirstOfficialTrailer = videos => {\n    return videos?.find(\n      video => video.type === 'Trailer' && video.official === true\n    );\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n\n        const movieDetails = await getMovies(`movie/${movieId}`);\n\n        setDetails(movieDetails);\n\n        const movieVideos = await getMovies(`movie/${movieId}/videos`);\n        setVideos(movieVideos.results);\n      } catch (error) {\n        toast.error('Something went wrong!!!');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (movieId) {\n      fetchData();\n    }\n  }, [movieId]);\n\n  const filteredVideos = findFirstOfficialTrailer(videos);\n\n  return (\n    <Container>\n      <BackLink to={BackLinkLocationRef.current}>Go back</BackLink>\n      {isLoading && <Loader />}\n      {details && (\n        <MovieInfo\n          {...details}\n          videos={videos}\n          firstOfficialTrailer={filteredVideos}\n          poster_path={\n            details.poster_path\n              ? `${BASE_URL}${details.poster_path}`\n              : defaultImageMovie\n          }\n          backdrop_path={\n            details.backdrop_path\n              ? `${BASE_URL}${details.backdrop_path}`\n              : defaultImageMovie\n          }\n        />\n      )}\n\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </Container>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\nconst API_KEY = '2b5715eb91948ab21d8a3671ab9cf18a';\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst getMovies = async (endpoint, params = {}) => {\n  const response = await axios.get(`${BASE_URL}${endpoint}`, {\n    params: {\n      api_key: API_KEY,\n      ...params,\n    },\n  });\n  return response.data;\n};\n\nexport default getMovies;\n","export const defaultImageMovie =\n  'https://images.pexels.com/photos/6177645/pexels-photo-6177645.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1';\n\nexport const defaultImageActor =\n  'https://banffventureforum.com/wp-content/uploads/2019/08/no-photo-icon-22.png';\n"],"names":["StyledLink","styled","Link","_templateObject","_taggedTemplateLiteral","_ref","to","children","_jsx","_Fragment","_jsxs","GoArrowLeft","Container","StyledMovieVideo","name","videoKey","title","src","concat","allowFullScreen","frameBorder","allow","Title","_templateObject2","Wrapper","_templateObject3","props","background","Image","_templateObject4","DescriptionContainer","_templateObject5","DescriptionWrapper","_templateObject6","UserScoreWrapper","_templateObject7","UserScore","_templateObject8","UserScoreValue","_templateObject9","Overview","_templateObject10","OverviewText","_templateObject11","GenresWrapper","_templateObject12","GenresTitle","_templateObject13","Genres","_templateObject14","InfoContainer","_templateObject15","AdditionalInfo","_templateObject16","List","_templateObject17","ListItem","_templateObject18","_templateObject19","poster_path","backdrop_path","vote_average","overview","genres","release_date","firstOfficialTrailer","videos","year","Date","getFullYear","vote","toFixed","alt","width","height","length","map","genre","id","MovieVideo","type","official","key","BASE_URL","_location$state$from","_location$state","movieId","useParams","_useState","useState","_useState2","_slicedToArray","details","setDetails","_useState3","_useState4","setVideos","_useState5","_useState6","isLoading","setIsLoading","location","useLocation","BackLinkLocationRef","useRef","state","from","useEffect","fetchData","_asyncToGenerator","_regeneratorRuntime","_callee","movieDetails","movieVideos","_context","prev","next","getMovies","sent","results","t0","toast","finish","stop","apply","arguments","filteredVideos","find","video","findFirstOfficialTrailer","BackLink","current","Loader","MovieInfo","_objectSpread","defaultImageMovie","Suspense","fallback","Outlet","API_KEY","endpoint","params","response","_args","undefined","axios","api_key","abrupt","data","_x","defaultImageActor"],"sourceRoot":""}